#!/usr/bin/env node

console.log('[frontend-docs] start');

import { readFileSync, writeFileSync, existsSync, readdirSync, statSync } from 'fs';
import { join, dirname, extname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('[frontend-docs] scanning src/');

// Configuration
const REFS_DIR = join(__dirname, '../../docs/dev/refs');
const FRONTEND_SUMMARY = join(REFS_DIR, 'frontend-summary.md');
const SRC_DIR = join(__dirname, '../../src');

console.log('[frontend-docs] found: src/');

/**
 * Simple component scanner
 */
function scanComponents() {
  const components = [];
  
  if (!existsSync(SRC_DIR)) {
    console.log('[frontend-docs] warning: src/ directory not found');
    return components;
  }
  
  try {
    const items = readdirSync(SRC_DIR);
    
    for (const item of items) {
      const fullPath = join(SRC_DIR, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        scanDirectory(fullPath, item, components);
      } else if (isReactFile(item)) {
        const component = analyzeFile(fullPath, item);
        if (component) {
          components.push(component);
        }
      }
    }
  } catch (error) {
    console.log('[frontend-docs] warning: could not scan src/:', error.message);
  }
  
  return components;
}

/**
 * Recursively scan directory
 */
function scanDirectory(dirPath, relativePath, components) {
  try {
    const items = readdirSync(dirPath);
    
    for (const item of items) {
      const fullPath = join(dirPath, item);
      const stat = statSync(fullPath);
      
      if (stat.isDirectory()) {
        if (!['node_modules', '.git', 'dist', 'build', '__tests__', '__mocks__'].includes(item)) {
          scanDirectory(fullPath, join(relativePath, item), components);
        }
      } else if (isReactFile(item)) {
        const component = analyzeFile(fullPath, join(relativePath, item));
        if (component) {
          components.push(component);
        }
      }
    }
  } catch (error) {
    console.log(`[frontend-docs] warning: could not scan directory ${dirPath}: ${error.message}`);
  }
}

/**
 * Check if file is a React file
 */
function isReactFile(filename) {
  const ext = extname(filename);
  return ['.tsx', '.jsx', '.ts', '.js'].includes(ext);
}

/**
 * Analyze a file for React components
 */
function analyzeFile(filePath, relativePath) {
  try {
    const content = readFileSync(filePath, 'utf8');
    
    // Simple check for React components
    if (content.includes('import') && content.includes('react') || 
        content.includes('export') && content.includes('function') ||
        content.includes('export') && content.includes('const')) {
      
      const name = extractName(content, relativePath);
      return {
        name,
        file: relativePath.replace(/\\/g, '/'), // Use forward slashes
        type: 'React Component',
        description: 'Component detected',
        props: []
      };
    }
    
    return null;
  } catch (error) {
    console.log(`[frontend-docs] warning: could not analyze file ${filePath}: ${error.message}`);
    return null;
  }
}

/**
 * Extract component name
 */
function extractName(content, filename) {
  // Try to find named export
  const namedExportMatch = content.match(/export\s+(?:default\s+)?(?:function|const|class)\s+(\w+)/);
  if (namedExportMatch) {
    return namedExportMatch[1];
  }
  
  // Try to find default export
  const defaultExportMatch = content.match(/export\s+default\s+(\w+)/);
  if (defaultExportMatch) {
    return defaultExportMatch[1];
  }
  
  // Fallback to filename
  return filename.replace(/\.(tsx|jsx|ts|js)$/, '').split('/').pop();
}

/**
 * Check if content has changed
 */
function hasContentChanged(newContent) {
  if (!existsSync(FRONTEND_SUMMARY)) {
    return true;
  }
  
  try {
    const existingContent = readFileSync(FRONTEND_SUMMARY, 'utf8');
    return existingContent !== newContent;
  } catch {
    return true;
  }
}

/**
 * Generate summary content
 */
function generateSummary(components) {
  let content = `# Frontend Component Summary

<!-- AUTO-GEN:FRONTEND-SUMMARY -->
<!-- This file is automatically generated. Do not edit manually. -->

## Overview

This document provides a comprehensive summary of all React components in the DocCraft-AI frontend codebase.

**Total Components Detected:** ${components.length}

## Component Details

`;

  if (components.length === 0) {
    content += 'No React components found in the current codebase.\n';
  } else {
    content += '| Component | File | Type | Description |\n';
    content += '|-----------|------|------|-------------|\n';
    
    for (const comp of components) {
      content += `| \`${comp.name}\` | \`${comp.file}\` | ${comp.type} | ${comp.description} |\n`;
    }
  }
  
  content += `\n## Generation Info

- **Generated by:** generate-frontend-summary.mjs
- **Last run:** Component scan completed
- **Status:** Deterministic output (no timestamps)

## Notes

- All file paths use forward slashes for cross-platform compatibility
- This file is automatically generated and should not be edited manually
`;
  
  return content;
}

// Main execution
const components = scanComponents();
console.log(`[frontend-docs] found: ${components.length} components`);

const summaryContent = generateSummary(components);

// Check if content has changed
if (hasContentChanged(summaryContent)) {
  writeFileSync(FRONTEND_SUMMARY, summaryContent);
  console.log(`[frontend-docs] wrote: docs/dev/refs/frontend-summary.md`);
} else {
  console.log('[frontend-docs] unchanged');
}

console.log('[frontend-docs] done');
