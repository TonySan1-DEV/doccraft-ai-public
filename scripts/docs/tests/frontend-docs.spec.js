const fs = require('node:fs');
const path = require('node:path');
const { execSync } = require('node:child_process');

const ROOT = process.cwd();
const p = (...xs) => path.resolve(ROOT, ...xs);

const SUMMARY = p('docs/dev/refs/frontend-summary.md');
const ROUTE_JSON = p('docs/dev/refs/route-map.json');
const COMP_JSON = p('docs/dev/refs/component-map.json');
const OVERVIEW = p('docs/dev/00-overview.md');

// Helper to run a command and capture output
function run(cmd) {
  return execSync(cmd, {
    cwd: ROOT,
    stdio: ['ignore', 'pipe', 'pipe'],
  }).toString();
}

describe('frontend docs generator', () => {
  test('first run generates or updates outputs', () => {
    const out = run('pnpm run docs:frontend');
    // Must not throw
    expect(out).toContain('[frontend-docs]'); // generator tag
    // Files should exist if src/ exists; if src/ missing, it should skip gracefully
    if (fs.existsSync(p('src'))) {
      expect(fs.existsSync(ROUTE_JSON)).toBe(true);
      expect(fs.existsSync(COMP_JSON)).toBe(true);
      // frontend-summary.md is generated by the summary script
      expect(fs.existsSync(SUMMARY)).toBe(true);
      expect(fs.existsSync(OVERVIEW)).toBe(true);
    }
  });

  test('second run is deterministic (unchanged when no src changes)', () => {
    const out = run('pnpm run docs:frontend');
    // Expect the command to say unchanged for key outputs when nothing changed.
    // Adjust these substrings to match your generator's logs exactly.
    expect(out).toMatch(/unchanged/i);
  });

  test('overview contains AUTO-GEN:FRONTEND block', () => {
    if (!fs.existsSync(OVERVIEW)) return;
    const md = fs.readFileSync(OVERVIEW, 'utf8');
    expect(md.includes('<!-- AUTO-GEN:FRONTEND-START -->')).toBe(true);
    expect(md.includes('<!-- AUTO-GEN:FRONTEND-END -->')).toBe(true);
  });

  test('route/component maps are JSON and stable keys', () => {
    if (!fs.existsSync(ROUTE_JSON) || !fs.existsSync(COMP_JSON)) return;
    const routes = JSON.parse(fs.readFileSync(ROUTE_JSON, 'utf8'));
    const comps = JSON.parse(fs.readFileSync(COMP_JSON, 'utf8'));
    expect(Array.isArray(routes.routes) || typeof routes === 'object').toBe(
      true
    );
    expect(typeof comps === 'object').toBe(true);

    // Deterministic sanity: stringify should be stable since generator sorts keys
    const s1 = JSON.stringify(routes);
    const s2 = JSON.stringify(routes);
    expect(s1).toBe(s2);
  });
});
