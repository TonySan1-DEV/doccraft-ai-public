name: CI Orchestrator

on:
  push:
    branches: [main, next]
  pull_request:
    branches: [main, next]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    uses: ./.github/workflows/lint.yml

  typecheck:
    uses: ./.github/workflows/typecheck.yml

  test:
    uses: ./.github/workflows/test.yml

  test-automation:
    uses: ./.github/workflows/test-automation.yml
    with:
      test_suite: 'all'
      parallel_execution: true
      retry_failed: true
      notify_on_failure: true

  e2e-testing:
    uses: ./.github/workflows/e2e-testing.yml
    with:
      run_advanced_patterns: true
      run_performance_tests: true
      run_visual_regression: true
      browsers: 'chromium,firefox,webkit'
      parallel: true

  performance-testing:
    uses: ./.github/workflows/performance-testing.yml
    with:
      performance_threshold: 3000
      lighthouse_score: 80
      run_web_vitals: true
      run_memory_tests: true

  coverage:
    uses: ./.github/workflows/coverage.yml

  emotionArc:
    uses: ./.github/workflows/emotionArc.yml

  validate-mcp:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - run: npm ci
      - name: Validate MCP Config
        run: node scripts/validate-mcp-config.js

  audit-export:
    uses: ./.github/workflows/export-audit-logs.yml
    with:
      run_audit: ${{ secrets.AWS_ACCESS_KEY_ID != '' || secrets.GCP_SERVICE_ACCOUNT != '' }}
    secrets:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

  audit-reingest:
    uses: ./.github/workflows/reingest-audit-logs.yml
    with:
      run_audit: ${{ secrets.AWS_ACCESS_KEY_ID != '' || secrets.GCP_SERVICE_ACCOUNT != '' }}
    secrets:
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}

  summary:
    runs-on: ubuntu-latest
    needs:
      [
        lint,
        typecheck,
        test,
        test-automation,
        e2e-testing,
        performance-testing,
        coverage,
        emotionArc,
        validate-mcp,
        audit-export,
        audit-reingest,
      ]
    if: always()
    steps:
      - name: Check workflow status
        run: |
          echo "Checking status of all modular workflows..."

          CORE_FAILURE=false

          if [[ "${{ needs.lint.result }}" != "success" ||
                "${{ needs.typecheck.result }}" != "success" ||
                "${{ needs.test.result }}" != "success" ||
                "${{ needs.test-automation.result }}" != "success" ||
                "${{ needs.e2e-testing.result }}" != "success" ||
                "${{ needs.performance-testing.result }}" != "success" ||
                "${{ needs.coverage.result }}" != "success" ||
                "${{ needs.emotionArc.result }}" != "success" ||
                "${{ needs.validate-mcp.result }}" != "success" ]]; then
            CORE_FAILURE=true
          fi

          if [[ "$CORE_FAILURE" == "true" ]]; then
            echo "‚ùå Some core CI checks failed:"
            echo "‚ùå Lint: ${{ needs.lint.result }}"
            echo "‚ùå Typecheck: ${{ needs.typecheck.result }}"
            echo "‚ùå Test: ${{ needs.test.result }}"
            echo "‚ùå Test Automation: ${{ needs.test-automation.result }}"
            echo "‚ùå E2E Testing: ${{ needs.e2e-testing.result }}"
            echo "‚ùå Performance Testing: ${{ needs.performance-testing.result }}"
            echo "‚ùå Coverage: ${{ needs.coverage.result }}"
            echo "‚ùå EmotionArc: ${{ needs.emotionArc.result }}"
            echo "‚ùå MCP Validation: ${{ needs.validate-mcp.result }}"
            exit 1
          else
            echo "‚úÖ All core CI checks passed successfully!"
            echo "‚úÖ Lint: ${{ needs.lint.result }}"
            echo "‚úÖ Typecheck: ${{ needs.typecheck.result }}"
            echo "‚úÖ Test: ${{ needs.test.result }}"
            echo "‚úÖ Test Automation: ${{ needs.test-automation.result }}"
            echo "‚úÖ E2E Testing: ${{ needs.e2e-testing.result }}"
            echo "‚úÖ Performance Testing: ${{ needs.performance-testing.result }}"
            echo "‚úÖ Coverage: ${{ needs.coverage.result }}"
            echo "‚úÖ EmotionArc: ${{ needs.emotionArc.result }}"
            echo "‚úÖ MCP Validation: ${{ needs.validate-mcp.result }}"
          fi

          echo "üìä Audit Export: ${{ needs.audit-export.result }}"
          echo "üìä Audit Reingest: ${{ needs.audit-reingest.result }}"

      - name: Comment on PR with summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const lintStatus = '${{ needs.lint.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const typecheckStatus = '${{ needs.typecheck.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const testStatus = '${{ needs.test.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const testAutomationStatus = '${{ needs.test-automation.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const e2eTestingStatus = '${{ needs.e2e-testing.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const performanceTestingStatus = '${{ needs.performance-testing.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const coverageStatus = '${{ needs.coverage.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const emotionArcStatus = '${{ needs.emotionArc.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const mcpValidationStatus = '${{ needs.validate-mcp.result }}' === 'success' ? '‚úÖ' : '‚ùå';
            const auditExportStatus = '${{ needs.audit-export.result }}' === 'success' ? '‚úÖ' : 'üìä';
            const auditReingestStatus = '${{ needs.audit-reingest.result }}' === 'success' ? '‚úÖ' : 'üìä';

            const overallStatus =
              '${{ needs.lint.result }}' === 'success' &&
              '${{ needs.typecheck.result }}' === 'success' &&
              '${{ needs.test.result }}' === 'success' &&
              '${{ needs.test-automation.result }}' === 'success' &&
              '${{ needs.e2e-testing.result }}' === 'success' &&
              '${{ needs.performance-testing.result }}' === 'success' &&
              '${{ needs.coverage.result }}' === 'success' &&
              '${{ needs.emotionArc.result }}' === 'success' &&
              '${{ needs.validate-mcp.result }}' === 'success'
                ? '‚úÖ PASSED'
                : '‚ùå FAILED';

            // Fetch all jobs for this workflow run
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            function linkForJob(name) {
              const job = jobs.jobs.find(j => j.name.toLowerCase().includes(name.toLowerCase()));
              return job ? `[${job.name}](${job.html_url})` : `${name} (link not found)`;
            }

            const jobLinks = 
              '### üîó Job Logs\n' +
              '- ' + linkForJob('lint') + '\n' +
              '- ' + linkForJob('typecheck') + '\n' +
              '- ' + linkForJob('test') + '\n' +
              '- ' + linkForJob('test-automation') + '\n' +
              '- ' + linkForJob('e2e-testing') + '\n' +
              '- ' + linkForJob('performance-testing') + '\n' +
              '- ' + linkForJob('coverage') + '\n' +
              '- ' + linkForJob('emotionArc') + '\n' +
              '- ' + linkForJob('validate-mcp') + '\n' +
              '- ' + linkForJob('audit-export') + '\n' +
              '- ' + linkForJob('audit-reingest') + '\n';

            const comment = 
              '## CI Orchestrator Summary\n\n' +
              '**Overall Status:** ' + overallStatus + '\n\n' +
              '### Core Checks\n' +
              '- Lint: ' + lintStatus + '\n' +
              '- Type Check: ' + typecheckStatus + '\n' +
              '- Tests: ' + testStatus + '\n' +
              '- Test Automation: ' + testAutomationStatus + '\n' +
              '- E2E Testing: ' + e2eTestingStatus + '\n' +
              '- Performance Testing: ' + performanceTestingStatus + '\n' +
              '- Coverage: ' + coverageStatus + '\n' +
              '- Emotion Arc: ' + emotionArcStatus + '\n' +
              '- MCP Validation: ' + mcpValidationStatus + '\n\n' +
              '### Audit Operations (Informational)\n' +
              '- Export Logs: ' + auditExportStatus + '\n' +
              '- Reingest Logs: ' + auditReingestStatus + '\n\n' +
              jobLinks + '\n' +
              '### Legend\n' +
              '- ‚úÖ = Passed\n' +
              '- ‚ùå = Failed\n' +
              '- üìä = Informational (non-blocking)\n\n' +
              '*Generated by GitHub Actions*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
