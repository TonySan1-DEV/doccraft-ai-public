name: Reingest Audit Logs

on:
  workflow_call:
    inputs:
      run_audit:
        required: true
        type: boolean
        description: 'Whether to run the audit reingest job'
    secrets:
      NEXT_PUBLIC_SUPABASE_URL:
        required: true
      SUPABASE_SERVICE_ROLE_KEY:
        required: true
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_REGION:
        required: false
      AWS_S3_BUCKET:
        required: false
      GOOGLE_CLOUD_CREDENTIALS:
        required: false
      GOOGLE_CLOUD_PROJECT_ID:
        required: false
      BIGQUERY_DATASET_ID:
        required: false
      BIGQUERY_TABLE_ID:
        required: false
      REINGEST_BATCH_SIZE:
        required: false
      REINGEST_RETRY_ATTEMPTS:
        required: false
  schedule:
    # Run daily at 4 AM UTC
    - cron: '0 4 * * *'
  workflow_dispatch:
    # Allow manual trigger
    inputs:
      source_type:
        description: 'Source type (s3 or bigquery)'
        required: true
        default: 's3'
        type: choice
        options:
          - s3
          - bigquery

env:
  NODE_VERSION: '18'
  SOURCE_TYPE: ${{ github.event.inputs.source_type || 's3' }}

jobs:
  reingest-audit-logs:
    if: ${{ inputs.run_audit }}
    name: Reingest Audit Logs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Install TypeScript
        run: npm install -g typescript ts-node

      - name: Detect Provider
        id: detect
        run: |
          if [ -n "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "provider=aws" >> $GITHUB_OUTPUT
          elif [ -n "${{ secrets.GCP_SERVICE_ACCOUNT }}" ]; then
            echo "provider=gcp" >> $GITHUB_OUTPUT
          else
            echo "provider=none" >> $GITHUB_OUTPUT
          
      - name: Configure AWS Credentials
        if: steps.detect.outputs.provider == 'aws'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure GCP Credentials
        if: steps.detect.outputs.provider == 'gcp'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          
      - name: Create environment file
        run: |
          cat > .env << EOF
          NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          PROVIDER=${{ steps.detect.outputs.provider }}
          EOF
          
          # Add AWS credentials for AWS provider
          if [ "${{ steps.detect.outputs.provider }}" = "aws" ]; then
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_REGION=us-east-1" >> .env
            echo "AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET || 'doccraft-audit-logs' }}" >> .env
          fi
          
          # Add GCP credentials for GCP provider
          if [ "${{ steps.detect.outputs.provider }}" = "gcp" ]; then
            echo "GOOGLE_CLOUD_PROJECT_ID=${{ secrets.GOOGLE_CLOUD_PROJECT_ID }}" >> .env
            echo "BIGQUERY_DATASET_ID=${{ secrets.BIGQUERY_DATASET_ID || 'audit_logs' }}" >> .env
            echo "BIGQUERY_TABLE_ID=${{ secrets.BIGQUERY_TABLE_ID || 'pattern_moderation_log' }}" >> .env
          fi
          
          echo "REINGEST_BATCH_SIZE=${{ secrets.REINGEST_BATCH_SIZE || '1000' }}" >> .env
          echo "REINGEST_RETRY_ATTEMPTS=${{ secrets.REINGEST_RETRY_ATTEMPTS || '3' }}" >> .env
          
      - name: Run audit log reingestion
        if: steps.detect.outputs.provider != 'none'
        run: |
          npx ts-node scripts/cron/reingestFallbackLogs.ts ${{ steps.detect.outputs.provider }}
        env:
          NODE_ENV: production
        id: reingest-audit-logs

      - name: Skip audit reingest (no provider)
        if: steps.detect.outputs.provider == 'none'
        run: echo "üìù Skipping audit reingest - no cloud provider configured"
          
      - name: Upload logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reingest-logs-${{ github.run_id }}
          path: |
            scripts/cron/logs/
            scripts/cron/checkpoints/
          retention-days: 30 