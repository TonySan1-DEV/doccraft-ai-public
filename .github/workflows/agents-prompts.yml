name: Agents & Prompts Testing

on:
  push:
    paths:
      - 'packages/prompts/**'
      - 'tests/agents/**'
      - '.github/workflows/agents-prompts.yml'
  pull_request:
    paths:
      - 'packages/prompts/**'
      - 'tests/agents/**'
      - '.github/workflows/agents-prompts.yml'
  workflow_dispatch:

jobs:
  test-prompts:
    name: Test Prompts Package
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Test prompts package
        run: pnpm run test:prompts

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: prompts-test-results
          path: packages/prompts/coverage/
          retention-days: 30

  test-agents:
    name: Test Agents Smoke Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test-prompts

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: pnpm install

      - name: Run agents smoke tests
        run: pnpm run test:agents

      - name: Upload smoke test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: agents-smoke-results
          path: .artifacts/agents-smoke-report.json
          retention-days: 30

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-prompts, test-agents]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: pnpm install

      - name: Run MCP validation
        run: pnpm run mcp:validate

      - name: Upload MCP validation artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mcp-validation-integration
          path: .artifacts/mcp-validate.json
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            let status = '‚úÖ All tests passed';
            let details = '';

            // Check prompts test results
            try {
              const promptsCoverage = fs.existsSync('packages/prompts/coverage/') ? 'Available' : 'Not generated';
              details += `\nüì¶ Prompts: ${promptsCoverage}`;
            } catch (e) {
              details += '\nüì¶ Prompts: Error checking coverage';
            }

            // Check agents smoke test results
            try {
              const smokeReport = fs.existsSync('.artifacts/agents-smoke-report.json') ? 'Generated' : 'Not found';
              details += `\nü§ñ Agents: ${smokeReport}`;
            } catch (e) {
              details += '\nü§ñ Agents: Error checking report';
            }

            // Check MCP validation
            try {
              const mcpReport = fs.existsSync('.artifacts/mcp-validate.json') ? 'Generated' : 'Not found';
              details += `\nüîç MCP: ${mcpReport}`;
            } catch (e) {
              details += '\nüîç MCP: Error checking report';
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Agents & Prompts Integration Test Results\n\n**Status:** ${status}${details}\n\n[View workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
            });
